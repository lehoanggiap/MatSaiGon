/**
 * Tư tưởng cũ với loading circle
 */


// setTimeout(function() {
//         loadingCircle.style.display = "none";
// },5200);

// function setLoadingOut(ms){
//     return new Promise(function(resolve){
//         setTimeout(function() {
//             resolve()
//         }, ms)
//     })
// }

// function setLoadingInterVal(ms){
//     return new Promise(function(resolve){
//         setInterval(function(){
//             loadingCircle.style.display = "block"
//             resolve() //nó chỉ resolve 1 lần, sau đó nó sẽ bắt th setinterval này tiếp, nhưng k resolve nữa bởi vì cái hàm
//             //setLoadingInter chỉ chạy 1 lần
//         }, ms)
//     })
// }

// setLoadingOut(5300) //chạy 5300s xong chạy th interval, đúng chất promise, sau chạy th interval xong, sau 5300s lại chạy, tuy nhiên sau 5300s nó lại gọi interval nhưng sau đó k còn lời hứa nào nữa
//     .then(function(){
//         loadingCircle.style.display = "none";
//         return setLoadingInterVal(5300)
//     })

//     .then(function(){
//         return setLoadingOut(5300).then(function() {
//             loadingCircle.style.display = "none";
//         })
//     })

//nếu để thêm cái setLoadingInterVal(5300s) ở đây thì ra th giống khi k dùng promise  
    
// setInterval(function() {
//     loadingCircle.style.display = "block";
//     setTimeout(function() {
//         loadingCircle.style.display = "none";
//     }, 5200);
// }, 5300);


/********************************
 * 
 */

// var loadingCircle = document.getElementById("loading-circle");
        // loadingCircle.style.display = "block";
        // setTimeout(function() {
        //         loadingCircle.style.display = "none";
        // },5300);
        
        // setInterval(function() {
        //     loadingCircle.style.display = "block";
        //     setTimeout(function() {
        //         loadingCircle.style.display = "none";
        //     }, 5300);
        // }, 5300);

        //nếu th timeout đầu tiên có cùng tg vs th interval sau đó thì interval sẽ ghi đè th timeout, vì nó đc gọi trc trong
        //cơ chế stack, tụi nó đc gọi đồng thời, trong khi đó nếu interval và th timout trong nó có cùng tg, thì đầu tiên
        //nó set đc bằng block, sau đó nó none luôn, vì th timeout đc gọi lại trong function callback của: chưa rõ